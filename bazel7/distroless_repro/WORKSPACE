workspace(name = "bazel-example-1")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "rules_python",
    sha256 = "a644da969b6824cc87f8fe7b18101a8a6c57da5db39caa6566ec6109f37d2141",
    strip_prefix = "rules_python-0.20.0",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.20.0/rules_python-0.20.0.tar.gz",
)

load("@rules_python//python:repositories.bzl", "py_repositories")
py_repositories()

load("@rules_python//python:repositories.bzl", "python_register_toolchains")

python_register_toolchains(
    name = "python3",
    # Available versions are listed in @rules_python//python:versions.bzl.
    # We recommend using the same version your team is already standardized on.
    python_version = "3.10",
)

load("@python3//:defs.bzl", "interpreter")


###############
# Aspect bazel lib

http_archive(
    name = "aspect_bazel_lib",
    sha256 = "a59096e01b43d86c6667a869f0e90e0c4b1d4cb03c3d3a972a32ff687c750ac2",
    strip_prefix = "bazel-lib-2.5.1",
    url = "https://github.com/aspect-build/bazel-lib/releases/download/v2.5.1/bazel-lib-v2.5.1.tar.gz",
)

load("@aspect_bazel_lib//lib:repositories.bzl", "aspect_bazel_lib_dependencies", "aspect_bazel_lib_register_toolchains")

# Required bazel-lib dependencies

aspect_bazel_lib_dependencies()

# Register bazel-lib toolchains

aspect_bazel_lib_register_toolchains()


##############
# Rules oci

http_archive(
    name = "rules_oci",
    sha256 = "d41d0ba7855f029ad0e5ee35025f882cbe45b0d5d570842c52704f7a47ba8668",
    strip_prefix = "rules_oci-1.4.3",
    url = "https://github.com/bazel-contrib/rules_oci/releases/download/v1.4.3/rules_oci-v1.4.3.tar.gz",
)

load("@rules_oci//oci:dependencies.bzl", "rules_oci_dependencies")

rules_oci_dependencies()

load("@rules_oci//oci:repositories.bzl", "LATEST_CRANE_VERSION", "oci_register_toolchains")

oci_register_toolchains(
    name = "oci",
    crane_version = LATEST_CRANE_VERSION,
    # Uncommenting the zot toolchain will cause it to be used instead of crane for some tasks.
    # Note that it does not support docker-format images.
    # zot_version = LATEST_ZOT_VERSION,
)


##############
# Rules debian

http_archive(
    name = "rules_debian_packages",
    sha256 = "0ae3b332f9d894e57693ce900769d2bd1b693e1f5ea1d9cdd82fa4479c93bcc8",
    strip_prefix = "rules_debian_packages-0.2.0",
    url = "https://github.com/betaboon/rules_debian_packages/releases/download/v0.2.0/rules_debian_packages-v0.2.0.tar.gz",
)

load("@rules_debian_packages//debian_packages:repositories.bzl", "rules_debian_packages_dependencies")

rules_debian_packages_dependencies(python_interpreter_target = interpreter)

load("@rules_debian_packages//debian_packages:defs.bzl", "debian_packages_repository")

debian_packages_repository(
    name = "debian_packages",
    default_arch = "amd64",
    default_distro = "debian12",
    lock_file = "//base_images/debian_rules_debian_packages:packages.lock",
)

load("@debian_packages//:packages.bzl", install_debian_deps = "install_deps")

install_debian_deps()


######################
# rules_distroless

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "rules_distroless",
    sha256 = "26ef24dcbefe9630e88fe773201ff4149798e4e482bf166c9e6de063c687e6a1",
    strip_prefix = "rules_distroless-0.3.0",
    url = "https://github.com/GoogleContainerTools/rules_distroless/releases/download/v0.3.0/rules_distroless-v0.3.0.tar.gz",
)

# Fetches the rules_distroless dependencies.
# If you want to have a different version of some dependency,
# you should fetch it *before* calling this.
# Alternatively, you can skip calling this function, so long as you've
# already fetched all the dependencies.
load("@rules_distroless//distroless:dependencies.bzl", "distroless_dependencies")

distroless_dependencies()


#### debian
# to update lockfile run
# bazel run @debian_distroless//:lock
load("@rules_distroless//apt:index.bzl", "deb_index")

deb_index(
    name = "debian_distroless",
    lock = "//base_images/debian_rules_distroless:debian.lock.json",
    manifest = "//base_images/debian_rules_distroless:debian.yaml",
)

load("@debian_distroless//:packages.bzl", "debian_distroless_packages")

debian_distroless_packages()
